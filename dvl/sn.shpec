#!/usr/bin/env bash

quitErr () {
 echo "$*" ; shift 1
 exit "$1"
} # quitErr

# if ! (readlink -e . | grep -Eq '/sn$') ; then
#  quitErr "need to be in sn dir"
# else
#  make
# fi

CMD="$(readlink -e ./sn.sh)"
# SNIPNAME_CAT_OTHER_FOLDER="./tst/sh"

# CMDFLAGS="-C $(pwd)"

# remove case '-C ./tst' due to removal of this flag in source code for simplicity:
for i in '' ; do
 describe "flag: ${i}"
 if [ -z "$i" ] ; then
     SNIPNAME_RELATIVE='./tst/'
     CMDFLAGS="${i}"
 else
  cd "$(echo "${i}" | cut -d' ' -f 2)"
  SNIPNAME_RELATIVE=''
  CMDFLAGS="${i}"
 fi    

 describe "STEP: basic expansion\n\t(but still need relative snippet in tst folder):"
 it "no args passed -> output something in stdout/stderr:"
 assert present "$($CMD 2>&1)"
 end
 it "snippet that exists"
 input="$("${CMD}" ${CMDFLAGS} ${SNIPNAME_RELATIVE}if-i.sh)"
 expected="$(cat ${SNIPNAME_RELATIVE}if-x.sh)"
 [ -z "$input" ] && quitErr "snip exist: input is empty!" 1
 assert equal "${input}" "${expected}"
 end
 it "snippet that does not exists but has parent metafile:"
 inputFile="${SNIPNAME_RELATIVE}if-i.makefile"
 [ -f "${inputFile}" ] && quitErr "input file not supposed to exist: ${inputFile}" 1
 input="$("${CMD}" ${CMDFLAGS} "${inputFile}")"
 expected="$(cat ${SNIPNAME_RELATIVE}if-x.sh)"
 [ -z "$input" ] && quitErr "parent exist: input is empty!" 1
 assert equal "${input}" "${expected}"
 end
 it "snippet that does not exists and has no parent metafile:"
 input="$("${CMD}" ${CMDFLAGS} ${SNIPNAME_RELATIVE}if-i.makefile)"
 expected="$(cat ${SNIPNAME_RELATIVE}if-x.sh)"
 [ -z "$input" ] && quitErr "input is empty!" 1
 assert equal "${input}" "${expected}"
 end
 end
 
 describe "STEP: inheritance/transformation functionality"
 it "snippet that needs transformation"
 inputFile="${SNIPNAME_RELATIVE}begin.makefile"
 [ -f "${inputFile}" ] && quitErr "input file not supposed to exist: ${inputFile}" 1
 input="$("${CMD}" ${CMDFLAGS} "${inputFile}" )"
 expected="$(cat ${SNIPNAME_RELATIVE}begin-x.makefile)"
 [ -z "$input" ] && quitErr "input is empty!" 1
 assert equal "${input}" "${expected}"
 end
 end
 
 describe "STEP: nesting functionality"
 it "nest snippet"
 input="$("${CMD}" ${CMDFLAGS} ${SNIPNAME_RELATIVE}new.sh)"
 expected="$(cat ${SNIPNAME_RELATIVE}new-x.sh)"
 assert equal "$input" "$expected"
 end
 end

 describe "STEP: expanding variable functionality"
 it "expand var"
 input="$("${CMD}" ${CMDFLAGS} ${SNIPNAME_RELATIVE}header.sh)"
 expected="$(cat ${SNIPNAME_RELATIVE}header-x.sh)"
 assert equal "$input" "$expected"
 end
 end
 end
done
